<#@ template language="C#" #>
<#@ import namespace="NetModular.Lib.Utils.Core.Extensions" #>
<#@ import namespace="NetModular.Module.CodeGenerator.Domain.Property" #>
using System;
using <#= _prefix #>.Lib.Data.Abstractions.Attributes;
<# if(_baseEntityName=="IEntity" || _baseEntityName=="Entity" || _baseEntityName.StartsWith("Entity<")){ #>
using <#= _prefix #>.Lib.Data.Core.Entities;
<#}else{ #>
using <#= _prefix #>.Lib.Data.Core.Entities.Extend;
<#} #>

namespace <#= _prefix #>.Module.<#= _model.Module.Code #>.Domain.<#= _class.Name #>
{
    /// <summary>
    /// <#= _class.Remarks #>
    /// </summary>
    [Table("<#= _class.TableName #>")]
    public partial class <#= _class.Name #>Entity : <#= _baseEntityName #>
    {
<# foreach(var p in _propertyList){ if(p.IsInherit) continue;#>
        /// <summary>
        /// <#= p.Remarks #>
        /// </summary>
<# if(p.Nullable && p.Type == PropertyType.String){ #>
		[Nullable]
<# } #>
<# if(p.Type == PropertyType.String){ #>
<# if(p.Length == 0){ #>
		[Max]
<# } else if(p.Length !=50) { #>
        [Length(<#= p.Length #>)]
<# } #>
<# } #>
<# if(p.Type == PropertyType.Decimal||p.Type == PropertyType.Double){ #>
		[Precision]
<# } #>
        public <#= p.Type == PropertyType.Enum ? p.Enum.Name : p.Type.ToDescription() #><#= p.Nullable && p.Type != PropertyType.String ? "?" : "" #> <#= p.Name #> { get; set; }<#= GetDefaultValue(p) #>

<# } #>
    }
}
